<?xml version="1.0" encoding="UTF-8"?>
<?teipublisher output="tei"?><?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:pb="http://teipublisher.com/1.0" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:rel="http://schemas.openxmlformats.org/package/2006/relationships" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Word DOCX














                 
                 
                 
                  
                 
                    
                  
                 <desc>Convert DOCX via ODD</desc>
                </title>
                <title type="short">DOCX Import</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <revisionDesc>
            <change when="2019-05-07+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="docx" ns="http://schemas.openxmlformats.org/wordprocessingml/2006/main"> <elementSpec ident="body" mode="add">
                    <model behaviour="body"/>
                </elementSpec>
                <elementSpec ident="p" mode="add">
                    <model predicate="$parameters?pstyle(.)/name[starts-with(@w:val, 'tei:')]" behaviour="inline">
            <param name="tei_element" value="substring-after($parameters?pstyle(.)/name/@w:val, 'tei:')"/>
        </model>
                    <model predicate="$parameters?pstyle(.)/name[matches(@w:val, &#34;quote$&#34;, &#34;i&#34;)]" behaviour="cit"/>
                    <model predicate="$parameters?nstyle(.)/numFmt" behaviour="listItem">
            <param name="level" value="$parameters?nstyle(.)/@w:ilvl"/>
            <param name="type" value="if ($parameters?nstyle(.)/numFmt[@w:val = 'bullet']) then  () else  'ordered'"/>
        </model>
                    <model predicate="$parameters?pstyle(.)/name[matches(@w:val, &#34;^(heading|title|subtitle)&#34;, &#34;i&#34;)]" behaviour="heading">
            <param name="level" value="let $l := $parameters?pstyle(.)//outlineLvl/@w:val return  if ($l) then $l/number() + 1 else 0"/>
        </model>
                    <model behaviour="paragraph"/>
                </elementSpec>
                <elementSpec ident="r" mode="add">
                    <model predicate="drawing" behaviour="inline">
            <param name="content" value=".//pic:pic"/>
        </model>
                    <model predicate="ancestor::w:footnote and $parameters?cstyle(.)/name/@w:val = 'footnote reference'" behaviour="omit">
            <desc>Omit footnote characters inside the footnote text itself</desc>
        </model>
                    <model predicate="footnoteReference[@w:customMarkFollows]" behaviour="note">
            <desc>Footnote reference with a custom mark is encoded with type=original</desc>
            <param name="content" value="$parameters?footnote(.)"/>
            <param name="place" value="'footnote'"/>
            <param name="label" value="w:t"/>
            <param name="type" value="'original'"/>
        </model>
                    <model predicate="footnoteReference" behaviour="note">
            <param name="content" value="$parameters?footnote(.)"/>
            <param name="place" value="'footnote'"/>
            <param name="label" value="w:t"/>
        </model>
                    <model predicate="endnoteReference" behaviour="note">
            <param name="content" value="$parameters?endnote(.)"/>
            <param name="place" value="'endnote'"/>
        </model>
                    <model predicate="$parameters?cstyle(.)/name[@w:val = 'tei:persName'] and matches(., '&amp;#60;.*&amp;#62;')" behaviour="inline">
            <desc>Example for encoding @ref attached to a tei:persName element using a convention. Content between angle brackets will be stripped by post-processing</desc>
            <param name="ref" value="replace(., '^.*?&amp;#60;(.*)&amp;#62;.*$', '$1')"/>
            <pb:template xmlns="" xml:space="preserve"><persName xmlns="http://www.tei-c.org/ns/1.0" ref="http://d-nb.info/gnd/[[ref]]">[[content]]</persName></pb:template>
        </model>
                    <model predicate="$parameters?cstyle(.)/name[@w:val = 'tei:tag']" behaviour="inline">
            <desc>tei:tag may contain angle brackets, so needs to be handled separately</desc>
            <param name="tei_element" value="'tag'"/>
        </model>
                    <model predicate="$parameters?cstyle(.)/name[starts-with(@w:val, 'tei:')] and matches(., '&amp;#60;.*=.*&amp;#62;')" behaviour="inline">
            <desc>Character style starts with 'tei:' and has parameters in content, which will be interpreted as attribute list</desc>
            <param name="tei_element" value="substring-after($parameters?cstyle(.)/name/@w:val, 'tei:')"/>
            <param name="tei_attributes" value="tokenize(replace(., '^.*?&amp;#60;(.*)&amp;#62;.*$', '$1'), '\s*;\s*')"/>
        </model>
                    <model predicate="$parameters?cstyle(.)/name[starts-with(@w:val, 'tei:')]" behaviour="inline">
            <param name="tei_element" value="substring-after($parameters?cstyle(.)/name/@w:val, 'tei:')"/>
        </model>
                    <model predicate="rPr/(u|i|caps|b) or $parameters?cstyle(.)/rPr/(u|i|caps|b)" behaviour="inline">
            <param name="rend" value="(rPr/(u|i|caps|b), $parameters?cstyle(.)/rPr/(u|i|caps|b)) ! local-name(.)"/>
            <pb:template xmlns="" xml:space="preserve"><hi xmlns="http://www.tei-c.org/ns/1.0" rend="[[rend]]">[[content]]</hi></pb:template>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="document" mode="add">
                    <model behaviour="document">
            <param name="content" value="($parameters?properties, .)"/>
        </model>
                </elementSpec>
                <elementSpec ident="bookmarkStart" mode="add">
                    <model predicate="not(starts-with(@w:name, 'OLE') or @w:name='_GoBack')" behaviour="anchor">
            <param name="id" value="@w:name"/>
        </model>
                </elementSpec>
                <elementSpec ident="hyperlink" mode="add">
                    <model predicate="@w:anchor" behaviour="link">
            <param name="uri" value="'#' || @w:anchor"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="$parameters?link(.)/@Target/string()"/>
        </model>
                </elementSpec>
                <elementSpec ident="cp:coreProperties" mode="add">
                    <model behaviour="metadata">
            <param name="title" value="if (dc:title/node()) then dc:title else replace(util:collection-name(.), '^.*?/([^/]+)/docProps.*$', '$1')"/>
            <param name="author" value="dc:creator"/>
            <pb:template xmlns="" xml:space="preserve"><fileDesc xmlns="http://www.tei-c.org/ns/1.0">
  <titleStmt>
    <title>[[title]]</title>
    [[author]]
  </titleStmt>
  <publicationStmt>
    <p>Information about publication or distribution</p>
  </publicationStmt>
  <sourceDesc>
    <p>Information about the source</p>
  </sourceDesc>
</fileDesc></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="dc:title" mode="add">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="dc:author" mode="add"/>
                <elementSpec ident="dc:creator" mode="add">
                    <model behaviour="inline">
            <param name="tei_element" value="'author'"/>
        </model>
                </elementSpec>
                <elementSpec ident="tbl" mode="add">
                    <model behaviour="table">
            <param name="content" value="tr"/>
        </model>
                </elementSpec>
                <elementSpec ident="tr" mode="add">
                    <model behaviour="row">
            <param name="content" value="tc"/>
        </model>
                </elementSpec>
                <elementSpec ident="tc" mode="add">
                    <model behaviour="cell">
            <param name="content" value="p"/>
            <param name="cols" value="tcPr/gridSpan/@w:val"/>
        </model>
                </elementSpec>
                <elementSpec ident="t" mode="add">
                    <model behaviour="text"/>
                </elementSpec>
                <elementSpec ident="*" mode="add">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="pic:pic" mode="add">
                    <model behaviour="graphic">
            <param name="url" value="let $id := .//a:blip/@r:embed  let $mediaColl := $parameters?filename || &#34;.media/&#34;  let $target := $parameters?rels/rel:Relationship[@Id=$id]/@Target return  $mediaColl || substring-after($target, &#34;media/&#34;)"/>
        </model>
                </elementSpec>
                <elementSpec ident="smartTag" mode="add">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="pict" mode="add">
                    <model behaviour="inline">
            <param name="content" value=".//v:imagedata"/>
        </model>
                </elementSpec>
                <elementSpec ident="v:imagedata" mode="add">
                    <model behaviour="graphic">
            <param name="url" value="let $id := @r:id let $mediaColl := $parameters?filename || &#34;.media/&#34;  let $relationship := $parameters?rels/rel:Relationship[@Id=$id] let $target := $relationship/@Target return  if ($relationship/@TargetMode = &#34;External&#34;) then      $target     else   $mediaColl || substring-after($target, &#34;media/&#34;)"/>
        </model>
                </elementSpec>
            <elementSpec ident="commentRangeStart" mode="add">
                    <model behaviour="anchor">
            <param name="id" value="'ac'||@w:id"/>
            <param name="type" value="'note'"/>
        </model>
                </elementSpec>
                <elementSpec ident="commentRangeEnd" mode="add">
                    <model behaviour="note">
            <param name="content" value="$parameters?comment(.)"/>
            <param name="place" value="'footnote'"/>
            <param name="target" value="'ac' || @w:id"/>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>